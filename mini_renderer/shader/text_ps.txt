bool bvec1(bool x0)
{
    return bool(x0);
}
float2 vec2(float x0)
{
    return float2(x0, x0);
}
float3 vec3(float x0)
{
    return float3(x0, x0, x0);
}
float3 vec3(float x0, float x1, float x2)
{
    return float3(x0, x1, x2);
}
float3 vec3(float3 x0)
{
    return float3(x0);
}
float4 vec4(float x0)
{
    return float4(x0, x0, x0, x0);
}
int ivec1(float x0)
{
    return int(x0);
}
int ivec1(int x0)
{
    return int(x0);
}
int ivec1(uint x0)
{
    return int(x0);
}
uint2 uvec2(float2 x0)
{
    return uint2(x0);
}
// Uniforms

uniform float __BloomFactor : register(c0);
uniform float __BloomFactor2 : register(c1);
uniform float __BloomFactor3 : register(c2);
uniform float __BloomFactor4 : register(c3);
uniform float __BloomFactor5 : register(c4);
uniform float4 __Color : register(c5);
uniform float4 __CustomLightDir : register(c6);
uniform float4 __EnvColor : register(c7);
uniform float3 __FirstShadowMultColor : register(c8);
uniform float3 __FirstShadowMultColor2 : register(c9);
uniform float3 __FirstShadowMultColor3 : register(c10);
uniform float3 __FirstShadowMultColor4 : register(c11);
uniform float3 __FirstShadowMultColor5 : register(c12);
uniform float __LightArea : register(c13);
uniform float3 __LightSpecColor : register(c14);
uniform float4 __ScreenParams : register(c15);
uniform float __Shininess : register(c16);
uniform float __SpecMulti : register(c17);
uniform float __UsingDitherAlpha : register(c18);
uniform float3 __WorldSpaceCameraPos : register(c19);
uniform float4 __WorldSpaceLightPos0 : register(c20);
uniform float4 __lightProbColor : register(c21);
uniform float __lightProbToggle : register(c22);
uniform float4 _hlslcc_mtx4x4_DITHERMATRIX[4] : register(c23);
static const uint __LightMapTex = 0;
static const uint __MainTex = 1;
uniform Texture2D textures2D[2] : register(t0);
uniform SamplerState samplers2D[2] : register(s0);
#define ANGLE_USES_DISCARD_REWRITING
#ifdef ANGLE_ENABLE_LOOP_FLATTEN
#define LOOP [loop]
#define FLATTEN [flatten]
#else
#define LOOP
#define FLATTEN
#endif
// Varyings
static  float4 _vs_COLOR0 = {0, 0, 0, 0};
static  float _vs_COLOR1 = {0};
static  float2 _vs_TEXCOORD0 = {0, 0};
static  float3 _vs_TEXCOORD1 = {0, 0, 0};
static  float3 _vs_TEXCOORD2 = {0, 0, 0};
static  float4 _vs_TEXCOORD3 = {0, 0, 0, 0};

static float4 out_SV_Target0 = {0, 0, 0, 0};

cbuffer DriverConstants : register(b1)
{
    struct SamplerMetadata
    {
        int baseLevel;
        int internalFormatBits;
        int wrapModes;
        int padding;
    };
    SamplerMetadata samplerMetadata[2] : packoffset(c4);
};

float4 gl_texture2D(const uint samplerIndex, float2 t)
{
    return textures2D[samplerIndex].Sample(samplers2D[samplerIndex], float2(t.x, t.y));
}

static float4 _ImmCB_0_0_0[4] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
static float4 _u_xlat10_0 = {0, 0, 0, 0};
static bool _u_xlatb0 = {0};
static float4 _u_xlat1 = {0, 0, 0, 0};
static float3 _u_xlat10_1 = {0, 0, 0};
static bool2 _u_xlatb1 = {0, 0};
static float _u_xlat16_2 = {0};
static bool4 _u_xlatb2 = {0, 0, 0, 0};
static float2 _u_xlat3 = {0, 0};
static float4 _u_xlat16_3 = {0, 0, 0, 0};
static bool2 _u_xlatb3 = {0, 0};
static float3 _u_xlat16_4 = {0, 0, 0};
static float3 _u_xlat5 = {0, 0, 0};
static float3 _u_xlat6 = {0, 0, 0};
static float3 _u_xlat16_7 = {0, 0, 0};
static float3 _u_xlat8 = {0, 0, 0};
static float _u_xlat16_8 = {0};
static int _u_xlati8 = {0};
static uint3 _u_xlatu8 = {0, 0, 0};
static bool3 _u_xlatb8 = {0, 0, 0};
static float3 _u_xlat16_12 = {0, 0, 0};
static bool _u_xlatb24 = {0};
static float _u_xlat16_28 = {0};
void gl_main()
{
(_ImmCB_0_0_0[0] = float4(1.0, 0.0, 0.0, 0.0));
(_ImmCB_0_0_0[1] = float4(0.0, 1.0, 0.0, 0.0));
(_ImmCB_0_0_0[2] = float4(0.0, 0.0, 1.0, 0.0));
(_ImmCB_0_0_0[3] = float4(0.0, 0.0, 0.0, 1.0));

(_u_xlat10_0 = gl_texture2D(__LightMapTex, _vs_TEXCOORD0.xy));
(_u_xlat10_1.xyz = gl_texture2D(__MainTex, _vs_TEXCOORD0.xy).xyz);

(_u_xlat16_2 = (_u_xlat10_0.y * _vs_COLOR0.x));

(_u_xlat8.x = (((-_vs_COLOR0.x) * _u_xlat10_0.y) + 1.5));
(_u_xlat8.x = floor(_u_xlat8.x));
(_u_xlat8.x = max(_u_xlat8.x, 0.0));
(_u_xlati8  = ivec1(_u_xlat8.x));    // -_vs_COLOR0.x * _u_xlat10_0.y > 0.5


//对 _vs_COLOR0.x * _u_xlat10_0.y进行微调 ?
(_u_xlat3.xy = ((vec2(_u_xlat16_2) * float2(1.2, 1.25)) + float2(-0.1, -0.125)));

float s3 = {0};
if ((_u_xlati8 != 0))
{
(s3 = _u_xlat3.y);
}
else
{
(s3 = _u_xlat3.x);
}

(_u_xlat16_2 = s3);
(_u_xlat16_2 = (_u_xlat16_2 + _vs_COLOR1));
(_u_xlat16_2 = ((_u_xlat16_2 * 0.5) + (-__LightArea)));
(_u_xlat16_2 = (_u_xlat16_2 + 1.0));
(_u_xlat16_2 = floor(_u_xlat16_2));
(_u_xlat16_2 = max(_u_xlat16_2, 0.0));
(_u_xlati8 = ivec1(_u_xlat16_2));  //  (halfLambert + lightMap.g*vertexColor.r)*0.5 < __LightArea

if ((_u_xlati8 == 0))  
{
(_u_xlat8.x = (_u_xlat10_0.w + 0.1));
(_u_xlatb2 = (_u_xlat8.xxxx >= float4(0.80000001, 0.40000001, 0.2, 0.60000002)));
(_u_xlatb3.xy = (_u_xlat8.xxxx < float4(0.60000002, 0.40000001, 0.0, 0.0)).xy);
(_u_xlatb3.x = (_u_xlatb2.y && _u_xlatb3.x));  // x>=0.4 && x<0.6
(_u_xlatb3.y = (_u_xlatb2.z && _u_xlatb3.y));  // x>=0.2 && x<0.4
float s4 = {0};
if (_u_xlatb2.w)  // x>0.6
{
(s4 = __BloomFactor4);
}
else
{
(s4 = __BloomFactor);
}
(_u_xlat16_4.x = s4);

float3 s5 = {0, 0, 0};
if (_u_xlatb2.w) // x>0.6
{
(s5 = __FirstShadowMultColor4.xyz);
}
else
{
(s5 = __FirstShadowMultColor.xyz);
}
(_u_xlat16_12.xyz = s5);

float s6 = {0};
if (_u_xlatb3.y) //  x>=0.2 && x<0.4
{
(s6 = __BloomFactor2);
}
else
{
(s6 = _u_xlat16_4.x);
}
(_u_xlat16_4.x = s6);

float3 s7 = {0, 0, 0};
if (_u_xlatb3.y)
{
(s7 = __FirstShadowMultColor2.xyz);
}
else
{
(s7 = _u_xlat16_12.xyz);
}
(_u_xlat16_12.xyz = s7);

float s8 = {0};
if (_u_xlatb3.x) // x>=0.4 && x<0.6
{
(s8 = __BloomFactor3);
}
else
{
(s8 = _u_xlat16_4.x);
}
(_u_xlat16_4.x = s8);

float3 s9 = {0, 0, 0};
if (_u_xlatb3.x)
{
(s9 = __FirstShadowMultColor3.xyz);
}
else
{
(s9 = _u_xlat16_12.xyz);
}
(_u_xlat16_12.xyz = s9);

float s10 = {0};
if (_u_xlatb2.x) // x>0.8
{
(s10 = __BloomFactor5);
}
else
{
(s10 = _u_xlat16_4.x);
}
(_u_xlat16_3.w = s10);
float3 s11 = {0, 0, 0};

if (_u_xlatb2.x) // x>0.8
{
(s11 = __FirstShadowMultColor5.xyz);
}
else
{
(s11 = _u_xlat16_12.xyz);
}


(_u_xlat16_4.xyz = s11);
(_u_xlat16_4.xyz = (_u_xlat10_1.xyz * _u_xlat16_4.xyz));


}
else
{
(_u_xlat8.x = (_u_xlat10_0.w + 0.1));
(_u_xlatb2 = (_u_xlat8.xxxx >= float4(0.80000001, 0.40000001, 0.2, 0.60000002)));
(_u_xlatb8.xz = (_u_xlat8.xxxx < float4(0.60000002, 0.0, 0.40000001, 0.40000001)).xz);
(_u_xlatb8.x = (_u_xlatb8.x && _u_xlatb2.y));
(_u_xlatb8.z = (_u_xlatb8.z && _u_xlatb2.z));
float s12 = {0};
if (_u_xlatb2.w)
{
(s12 = __BloomFactor4);
}
else
{
(s12 = __BloomFactor);
}
(_u_xlat16_28 = s12);
float s13 = {0};
if (_u_xlatb8.z)
{
(s13 = __BloomFactor2);
}
else
{
(s13 = _u_xlat16_28);
}
(_u_xlat16_28 = s13);
float s14 = {0};
if (_u_xlatb8.x)
{
(s14 = __BloomFactor3);
}
else
{
(s14 = _u_xlat16_28);
}
(_u_xlat16_28 = s14);
float s15 = {0};
if (_u_xlatb2.x)
{
(s15 = __BloomFactor5);
}
else
{
(s15 = _u_xlat16_28);
}
(_u_xlat16_3.w = s15);
(_u_xlat16_4.xyz = _u_xlat10_1.xyz);
}



(_u_xlatb8.x = !all(float4(0.0, 0.0, 0.0, 0.0) == vec4(__UsingDitherAlpha)));
if (_u_xlatb8.x)
{
(_u_xlatb8.x = (_vs_TEXCOORD3.z < 0.94999999));
if (_u_xlatb8.x)
{
(_u_xlat8.xz = (_vs_TEXCOORD3.yx / _vs_TEXCOORD3.ww));
(_u_xlat8.xz = (_u_xlat8.xz * __ScreenParams.yx));
(_u_xlat8.xz = (_u_xlat8.xz * float2(0.25, 0.25)));
(_u_xlatb1.xy = (_u_xlat8.xzxx >= (-_u_xlat8.xzxx)).xy);
(_u_xlat8.xz = frac(abs(_u_xlat8.xz)));
float s16 = {0};
if (_u_xlatb1.x)
{
(s16 = _u_xlat8.x);
}
else
{
(s16 = (-_u_xlat8.x));
}
(_u_xlat8.x = s16);
float s17 = {0};
if (_u_xlatb1.y)
{
(s17 = _u_xlat8.z);
}
else
{
(s17 = (-_u_xlat8.z));
}
(_u_xlat8.z = s17);
(_u_xlat8.xz = (_u_xlat8.xz * float2(4.0, 4.0)));
(_u_xlatu8.xz = uvec2(_u_xlat8.xz));
(_u_xlat1.x = dot(_hlslcc_mtx4x4_DITHERMATRIX[0], _ImmCB_0_0_0[ivec1(_u_xlatu8.z)]));
(_u_xlat1.y = dot(_hlslcc_mtx4x4_DITHERMATRIX[1], _ImmCB_0_0_0[ivec1(_u_xlatu8.z)]));
(_u_xlat1.z = dot(_hlslcc_mtx4x4_DITHERMATRIX[2], _ImmCB_0_0_0[ivec1(_u_xlatu8.z)]));
(_u_xlat1.w = dot(_hlslcc_mtx4x4_DITHERMATRIX[3], _ImmCB_0_0_0[ivec1(_u_xlatu8.z)]));
(_u_xlat8.x = dot(_u_xlat1, _ImmCB_0_0_0[ivec1(_u_xlatu8.x)]));
(_u_xlat8.x = ((_vs_TEXCOORD3.z * 17.0) + (-_u_xlat8.x)));
(_u_xlat8.x = (_u_xlat8.x + 0.99000001));
(_u_xlat8.x = floor(_u_xlat8.x));
(_u_xlat8.x = max(_u_xlat8.x, 0.0));
(_u_xlati8 = ivec1(_u_xlat8.x));
if ((_u_xlati8 == 0))
{
discard;
;
}
}
}
(_u_xlat8.x = dot(_vs_TEXCOORD1.xyz, _vs_TEXCOORD1.xyz));
(_u_xlat8.x = rsqrt(_u_xlat8.x));

(_u_xlat1.xyz = (_u_xlat8.xxx * _vs_TEXCOORD1.xyz));

(_u_xlat5.xyz = ((-_vs_TEXCOORD2.xyz) + __WorldSpaceCameraPos.xyz));
(_u_xlat8.x = dot(_u_xlat5.xyz, _u_xlat5.xyz));
(_u_xlat8.x = rsqrt(_u_xlat8.x));
(_u_xlat5.xyz = ((_u_xlat5.xyz * _u_xlat8.xxx) + __WorldSpaceLightPos0.xyz));
(_u_xlat8.x = dot(_u_xlat5.xyz, _u_xlat5.xyz));
(_u_xlat8.x = rsqrt(_u_xlat8.x));
(_u_xlat6.xyz = (_u_xlat8.xxx * _u_xlat5.xyz));
(_u_xlatb24 = (0.5 < __CustomLightDir.w));
(_u_xlat5.xyz = ((_u_xlat5.xyz * _u_xlat8.xxx) + (-__WorldSpaceLightPos0.xyz)));
(_u_xlat8.x = dot(_u_xlat5.xyz, _u_xlat5.xyz));
(_u_xlat8.x = rsqrt(_u_xlat8.x));
(_u_xlat16_7.xyz = ((_u_xlat5.xyz * _u_xlat8.xxx) + __CustomLightDir.xyz));
(_u_xlat16_28 = dot(_u_xlat16_7.xyz, _u_xlat16_7.xyz));
(_u_xlat16_28 = rsqrt(_u_xlat16_28));
(_u_xlat16_7.xyz = (vec3(_u_xlat16_28) * _u_xlat16_7.xyz));
float3 s18 = {0, 0, 0};
if (bvec1(_u_xlatb24))
{
(s18 = _u_xlat16_7.xyz);
}
else
{
(s18 = _u_xlat6.xyz);
}
(_u_xlat16_7.xyz = s18);
(_u_xlat16_28 = dot(_u_xlat1.xyz, _u_xlat16_7.xyz));
(_u_xlat16_28 = max(_u_xlat16_28, 0.0));
(_u_xlat16_28 = log2(_u_xlat16_28));
(_u_xlat16_28 = (_u_xlat16_28 * __Shininess));
(_u_xlat16_28 = exp2(_u_xlat16_28));
(_u_xlat16_8 = ((-_u_xlat10_0.z) + 1.0));
(_u_xlat16_8 = ((-_u_xlat16_28) + _u_xlat16_8));
(_u_xlat8.x = (_u_xlat16_8 + 1.0));
(_u_xlat8.x = floor(_u_xlat8.x));
(_u_xlat8.x = max(_u_xlat8.x, 0.0));
(_u_xlati8 = ivec1(_u_xlat8.x));
(_u_xlat16_7.xyz = (vec3(vec3(__SpecMulti, __SpecMulti, __SpecMulti)) * __LightSpecColor.xyz));
(_u_xlat16_7.xyz = (_u_xlat10_0.xxx * _u_xlat16_7.xyz));
float3 s19 = {0, 0, 0};
if ((ivec1(_u_xlati8) != 0))
{
(s19 = float3(0.0, 0.0, 0.0));
}
else
{
(s19 = _u_xlat16_7.xyz);
}
(_u_xlat16_7.xyz = s19);
(_u_xlat16_4.xyz = (_u_xlat16_4.xyz + _u_xlat16_7.xyz));
(_u_xlat16_7.xyz = (__Color.xyz * __EnvColor.xyz));
(_u_xlat16_4.xyz = (_u_xlat16_4.xyz * _u_xlat16_7.xyz));
(_u_xlatb0 = (0.5 < __lightProbToggle));
float3 s20 = {0, 0, 0};
if (bvec1(_u_xlatb0))
{
(s20 = __lightProbColor.xyz);
}
else
{
(s20 = float3(1.0, 1.0, 1.0));
}
(_u_xlat16_7.xyz = s20);
(_u_xlat16_3.xyz = (_u_xlat16_4.xyz * _u_xlat16_7.xyz));
(out_SV_Target0 = _u_xlat16_3);
return;
;
}
;
struct PS_INPUT
{
    float4 dx_Position : SV_Position;
    float4 gl_Position : TEXCOORD6;
    float4 v0 : TEXCOORD0;
    float4 v1 : TEXCOORD1;
    float3 v2 : TEXCOORD2;
    float3 v3 : TEXCOORD3;
    float2 v4 : TEXCOORD4;
    float v5 : TEXCOORD5;
};

struct PS_OUTPUT
{
    float4 out_SV_Target0 : SV_TARGET0;
};

PS_OUTPUT generateOutput()
{
    PS_OUTPUT output;
    output.out_SV_Target0 = out_SV_Target0;
    return output;
}

PS_OUTPUT main(PS_INPUT input)
{
    _vs_COLOR0 = input.v0;
    _vs_TEXCOORD3 = input.v1;
    _vs_TEXCOORD1 = input.v2.xyz;
    _vs_TEXCOORD2 = input.v3.xyz;
    _vs_TEXCOORD0 = input.v4.xy;
    _vs_COLOR1 = input.v5.x;

    gl_main();

    return generateOutput();
}